<?php
/**
 * Generated by XSD2PHP
 *
 * PHP version 5.3
 *
 * @category Util
 * @package  XSD2PHP
 * @author   David Gillen <david.gillen@nexus451.com>
 * @license  GNU GPL - http://www.gnu.org/licenses/gpl.txt
 * @link     https://github.com/davidgillen/XSD2PHP
 */

/**
 * Class representing a IR56B
 *
 * @category XSD2PHP
 * @package  XSD2PHP
 * @author   David Gillen <david.gillen@nexus451.com>
 * @license  GNU GPL - http://www.gnu.org/licenses/gpl.txt
 * @link     http://www.nexus451.com
 */
class IR56B
{
    public $Section = null;
    public $ERN = null;
    public $YrErReturn = null;
    public $SubDate = null;
    public $ErName = null;
    public $Designation = null;
    public $NoRecordBatch = null;
    public $TotIncomeBatch = null;
    public $Employee;

    /**
     * IR56B constructor
     *
     * @param string   $Section        {0, }
     * @param string   $ERN            {1, 8}
     * @param string   $YrErReturn     {0, }
     * @param string   $SubDate        {0, }
     * @param string   $ErName         {1, 70}
     * @param string   $Designation    {0, 25}
     * @param string   $NoRecordBatch  {1, 5}
     * @param string   $TotIncomeBatch {1, 11}
     * @param Employee $Employee       {1, unbounded}
     */
    public function __construct($Section = null, $ERN = null, $YrErReturn = null, $SubDate = null, $ErName = null, $Designation = null, $NoRecordBatch = null, $TotIncomeBatch = null, $Employee = null)
    {
        if ( $Section == null ) {
            throw new Exception('$Section must be set.');
        }
        $item = $Section;
        if ( strlen($item) < 0 ) {
            throw new Exception('$Section must be at least 0 characters.');
        } elseif ( strlen($item) >  ) {
            throw new Exception('$Section must be no more than  characters.');
        } else {
            $this->Section = $item;
        }
        if ( $ERN == null ) {
            throw new Exception('$ERN must be set.');
        }
        $item = $ERN;
        if ( strlen($item) < 1 ) {
            throw new Exception('$ERN must be at least 1 characters.');
        } elseif ( strlen($item) > 8 ) {
            throw new Exception('$ERN must be no more than 8 characters.');
        } else {
            $this->ERN = $item;
        }
        if ( $YrErReturn == null ) {
            throw new Exception('$YrErReturn must be set.');
        }
        $item = $YrErReturn;
        if ( strlen($item) < 0 ) {
            throw new Exception('$YrErReturn must be at least 0 characters.');
        } elseif ( strlen($item) >  ) {
            throw new Exception('$YrErReturn must be no more than  characters.');
        } else {
            $this->YrErReturn = $item;
        }
        if ( $SubDate == null ) {
            throw new Exception('$SubDate must be set.');
        }
        $item = $SubDate;
        if ( strlen($item) < 0 ) {
            throw new Exception('$SubDate must be at least 0 characters.');
        } elseif ( strlen($item) >  ) {
            throw new Exception('$SubDate must be no more than  characters.');
        } else {
            $this->SubDate = $item;
        }
        if ( $ErName == null ) {
            throw new Exception('$ErName must be set.');
        }
        $item = $ErName;
        if ( strlen($item) < 1 ) {
            throw new Exception('$ErName must be at least 1 characters.');
        } elseif ( strlen($item) > 70 ) {
            throw new Exception('$ErName must be no more than 70 characters.');
        } else {
            $this->ErName = $item;
        }
        if ( $Designation == null ) {
            throw new Exception('$Designation must be set.');
        }
        $item = $Designation;
        if ( strlen($item) < 0 ) {
            throw new Exception('$Designation must be at least 0 characters.');
        } elseif ( strlen($item) > 25 ) {
            throw new Exception('$Designation must be no more than 25 characters.');
        } else {
            $this->Designation = $item;
        }
        if ( $NoRecordBatch == null ) {
            throw new Exception('$NoRecordBatch must be set.');
        }
        $item = $NoRecordBatch;
        if ( strlen($item) < 1 ) {
            throw new Exception('$NoRecordBatch must be at least 1 characters.');
        } elseif ( strlen($item) > 5 ) {
            throw new Exception('$NoRecordBatch must be no more than 5 characters.');
        } else {
            $this->NoRecordBatch = $item;
        }
        if ( $TotIncomeBatch == null ) {
            throw new Exception('$TotIncomeBatch must be set.');
        }
        $item = $TotIncomeBatch;
        if ( strlen($item) < 1 ) {
            throw new Exception('$TotIncomeBatch must be at least 1 characters.');
        } elseif ( strlen($item) > 11 ) {
            throw new Exception('$TotIncomeBatch must be no more than 11 characters.');
        } else {
            $this->TotIncomeBatch = $item;
        }
        if ( $Employee == null ) {
            throw new Exception('$Employee must be set.');
        }
        if ( get_class($Employee) != 'Employee' ) {
            throw new Exception('$Employee must be of type Employee.');
        }
        $this->Employee = $Employee;
    }
}
